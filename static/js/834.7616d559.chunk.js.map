{"version":3,"file":"static/js/834.7616d559.chunk.js","mappings":"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","sources":["Components/ToolNFT/NFTData.jsx","Components/ToolNFT/ToolNFT.jsx"],"sourcesContent":["// NFTData Image\r\nimport Beansbeg from \"../../Assets/Images/png/NFT/Beansbeg.png\";\r\nimport Ghost from \"../../Assets/Images/png/NFT/Ghost.png\";\r\nimport Aotu from \"../../Assets/Images/png/NFT/Aotu.png\";\r\nimport Whoopsies from \"../../Assets/Images/png/NFT/Woopsies.png\";\r\nimport Dreamy from \"../../Assets/Images/png/NFT/Dreamy.png\";\r\nimport Otherdeed from \"../../Assets/Images/png/NFT/Othernedeed.png\";\r\nimport Beanz from \"../../Assets/Images/png/NFT/Beanz.png\";\r\nimport Mutant from \"../../Assets/Images/png/NFT/Mutant.png\";\r\n\r\n// TokenData Image\r\nimport Yeti from \"../../Assets/Images/png/NovaToken/yeti.png\";\r\nimport Copi from \"../../Assets/Images/png/NovaToken/copi.png\";\r\nimport Society from \"../../Assets/Images/png/NovaToken/society.png\";\r\nimport Clay from \"../../Assets/Images/png/NovaToken/clay.png\";\r\nimport Hosky from \"../../Assets/Images/png/NovaToken/hosky.png\";\r\nimport Lobster from \"../../Assets/Images/png/NovaToken/lobster.png\";\r\nimport Drip from \"../../Assets/Images/png/NovaToken/drip.png\";\r\nimport Green from \"../../Assets/Images/png/NovaToken/green.png\";\r\n\r\n// ADAData Image\r\nimport Nami from \"../../Assets/Images/png/ADA/nami.png\";\r\nimport Yoroi from \"../../Assets/Images/png/ADA/yoroi.png\";\r\nimport Eternl from \"../../Assets/Images/png/ADA/eternal.png\";\r\n\r\nconst ToolADAData = [\r\n  { id: 1, image: Nami, name: \"Nami 1\" },\r\n  { id: 2, image: Nami, name: \"Nami 2\" },\r\n  { id: 3, image: Nami, name: \"Nami Pete\" },\r\n  { id: 4, image: Yoroi, name: \"Yoroi\" },\r\n  { id: 5, image: Eternl, name: \"Eternl 5\" },\r\n  { id: 6, image: Eternl, name: \"Tokens\" },\r\n  { id: 7, image: Eternl, name: \"NFTs\" },\r\n  { id: 8, image: Eternl, name: \"AAAAAA\" },\r\n];\r\n\r\nconst ToolNFTData = [\r\n  { id: 1, image: Beansbeg, name: \"Beanbag Frens\" },\r\n  { id: 2, image: Ghost, name: \"Ghost Buddy Official\" },\r\n  { id: 3, image: Aotu, name: \"AotuNFT\" },\r\n  { id: 4, image: Whoopsies, name: \"Whoopsies Doopsies\" },\r\n  { id: 5, image: Dreamy, name: \"Dreamy Official\" },\r\n  { id: 6, image: Otherdeed, name: \"Otherdeed for Otherside\" },\r\n  { id: 7, image: Beanz, name: \"BEANZ Official\" },\r\n  { id: 8, image: Mutant, name: \"Mutant Ape Yacht Club\" },\r\n];\r\n\r\nconst ToolTokenData = [\r\n  { id: 1, image: Yeti, name: \"$Yeti\" },\r\n  { id: 2, image: Copi, name: \"$Copi\" },\r\n  { id: 3, image: Society, name: \"$Society\" },\r\n  { id: 4, image: Clay, name: \"$Clay\" },\r\n  { id: 5, image: Hosky, name: \"$Hosky\" },\r\n  { id: 6, image: Lobster, name: \"$Lobster\" },\r\n  { id: 7, image: Drip, name: \"$Drip\" },\r\n  { id: 8, image: Green, name: \"$Green\" },\r\n];\r\n\r\nexport { ToolNFTData, ToolTokenData, ToolADAData };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"../Common/Container/Container\";\r\n\r\n// NFT IMAGES\r\nimport NFTItems from \"../NFTItems/NFTItems\";\r\nimport { ToolNFTData, ToolTokenData, ToolADAData } from \"./NFTData\";\r\nimport TabNavItem from \"../ReactTabs/TabNavItem\";\r\nimport TabContent from \"../ReactTabs/TabContent\";\r\nimport SearchBar from \"../Common/SearchBar/SearchBar\";\r\nimport ToolHoldingPortfolio from \"../ToolHoldingPortfolio/ToolHoldingPortfolio\";\r\nimport SoldPortfolio from \"../SoldPortfolio/SoldPortfolio\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getCollections } from \"../Features/novaSlice\";\r\nimport NFTItemsData from \"../NFTItems/NFTItemsData\";\r\n\r\nimport { notification } from \"../../utils/utility\";\r\n\r\nconst ToolNFT = () => {\r\n  const [activeTab, setActiveTab] = useState(\"NFTs\");\r\n  const walletAddress = localStorage.getItem(\"address\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { collectionsData, loading } = useSelector((state) => state.nova);\r\n\r\n  useEffect(() => {\r\n    if (!walletAddress) {\r\n      notification(\"Please connect any wallet..!\", \"error\");\r\n    } else {\r\n      dispatch(getCollections({ walletAddress: walletAddress }));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"!my-28\"></div>\r\n      <Container>\r\n        <div className=\"my-10\">\r\n          <div className=\"flex justify-center flex-wrap gap-4 my-10\">\r\n            <TabNavItem\r\n              title=\"Holding Portfolio\"\r\n              id=\"NFTs\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"Sold Portfolio\"\r\n              id=\"tokens\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n          </div>\r\n\r\n          <SearchBar />\r\n\r\n          <div className=\"flex gap-4 flex-wrap items-center mt-5 text-xl font-bold\">\r\n            <TabNavItem\r\n              title=\"NFTs\"\r\n              id=\"NFTs\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"Tokens\"\r\n              id=\"tokens\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"ADA\"\r\n              id=\"ada\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"Select Multiple\"\r\n              id=\"mul\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"Select all Collections\"\r\n              id=\"collections\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n            <TabNavItem\r\n              title=\"Select Multiple Projects\"\r\n              id=\"mulproject\"\r\n              activeTab={activeTab}\r\n              setActiveTab={setActiveTab}\r\n            />\r\n          </div>\r\n\r\n          <TabContent id=\"NFTs\" activeTab={activeTab}>\r\n            {loading ? (\r\n              <div>\r\n                <div className=\"multi-spinner-container\">\r\n                  <div className=\"multi-spinner\">\r\n                    <div className=\"multi-spinner\">\r\n                      <div className=\"multi-spinner\">\r\n                        <div className=\"multi-spinner\">\r\n                          <div className=\"multi-spinner\">\r\n                            <div className=\"multi-spinner\"></div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 place-items-center my-10\">\r\n                {/* {novaData?.map((x, index) => (\r\n                  <div key={index}>\r\n                    <NFTItemsData item={x} />\r\n                  </div>\r\n                ))} */}\r\n\r\n                {collectionsData?.map((x, index) => (\r\n                  <div key={index}>\r\n                    <NFTItems item={x} />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </TabContent>\r\n          <TabContent id=\"tokens\" activeTab={activeTab}>\r\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 place-items-center my-10\">\r\n              {ToolTokenData?.map((x, index) => (\r\n                <div key={index}>\r\n                  <NFTItems item={x} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </TabContent>\r\n          <TabContent id=\"ada\" activeTab={activeTab}>\r\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 place-items-center my-10\">\r\n              {ToolADAData?.map((x, index) => (\r\n                <div key={index}>\r\n                  <NFTItems item={x} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </TabContent>\r\n        </div>\r\n\r\n        {/* ToolHolding */}\r\n        {/* <ToolHoldingPortfolio /> */}\r\n      </Container>\r\n\r\n      {/* <NFTtable /> */}\r\n      {/* <SoldPortfolio /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToolNFT;\r\n"],"names":["ToolADAData","id","image","Nami","name","Yoroi","Eternl","ToolTokenData","Yeti","Copi","Society","Clay","Hosky","Lobster","Drip","Green","useState","activeTab","setActiveTab","walletAddress","localStorage","getItem","dispatch","useDispatch","useSelector","state","nova","collectionsData","loading","useEffect","getCollections","notification","className","TabNavItem","title","SearchBar","TabContent","map","x","index","NFTItems","item"],"sourceRoot":""}